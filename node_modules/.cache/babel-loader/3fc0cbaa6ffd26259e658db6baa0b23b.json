{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/* the original board\r\n\r\n O |   | X\r\n\r\n ---------\r\n\r\n X |   | X\r\n\r\n ---------\r\n\r\n   | O | O\r\n\r\n */\nexport function calculateWinner(squares) {\n  //This section calculates the winner\n  var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var i = 0; i < lines.length; i++) {\n    var _lines$i = _slicedToArray(lines[i], 3),\n        a = _lines$i[0],\n        b = _lines$i[1],\n        c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n} // This section calculates a draw\n\nexport function gameOver(squares) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = squares[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var square = _step.value;\n\n      if (square !== 'X' && square !== 'O') {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return false;\n}\nexport function getAvailableSpots(board) {\n  var indexFinder = 0;\n  var spots = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = board[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var spot = _step2.value;\n      indexFinder++;\n\n      if (spot !== 'O' && spot !== 'X') {\n        spots.push(indexFinder - 0);\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return spots;\n}","map":{"version":3,"sources":["C:\\Users\\Edson\\Desktop\\reacjs\\Tictactoe2018\\src\\utils\\helpers.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","gameOver","square","getAvailableSpots","board","indexFinder","spots","spot","push"],"mappings":";;AACA;;;;;;;;;;;;;AAeA,OAAO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAEzC;AAEE,MAAMC,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAA,kCACnBD,KAAK,CAACC,CAAD,CADc;AAAA,QAC9BE,CAD8B;AAAA,QAC3BC,CAD2B;AAAA,QACxBC,CADwB;;AAErC,QAAIN,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAArE,EAA0E;AACxE,aAAON,OAAO,CAACI,CAAD,CAAd;AACD;AACF;;AACD,SAAO,IAAP;AACD,C,CAED;;AAEA,OAAO,SAASG,QAAT,CAAkBP,OAAlB,EAA2B;AAAA;AAAA;AAAA;;AAAA;AAChC,yBAAmBA,OAAnB,8HAA4B;AAAA,UAAnBQ,MAAmB;;AAC1B,UAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpC,eAAO,KAAP;AACD;AACF;AAL+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMhC,SAAO,KAAP;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,KAAK,GAAG,EAAZ;AAFuC;AAAA;AAAA;;AAAA;AAGvC,0BAAiBF,KAAjB,mIAAwB;AAAA,UAAfG,IAAe;AACtBF,MAAAA,WAAW;;AACX,UAAIE,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;AAChCD,QAAAA,KAAK,CAACE,IAAN,CAAWH,WAAW,GAAG,CAAzB;AACD;AACF;AARsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASvC,SAAOC,KAAP;AACD","sourcesContent":["\r\n/* the original board\r\n\r\n O |   | X\r\n\r\n ---------\r\n\r\n X |   | X\r\n\r\n ---------\r\n\r\n   | O | O\r\n\r\n */\r\n\r\n\r\nexport function calculateWinner(squares) {\r\n  \r\n//This section calculates the winner\r\n\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i]\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a]\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\n// This section calculates a draw\r\n\r\nexport function gameOver(squares) {\r\n  for (let square of squares) {\r\n    if (square !== 'X' && square !== 'O') {\r\n      return false\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport function getAvailableSpots(board) {\r\n  let indexFinder = 0\r\n  let spots = []\r\n  for (let spot of board) {\r\n    indexFinder++\r\n    if (spot !== 'O' && spot !== 'X') {\r\n      spots.push(indexFinder - 0)\r\n    }\r\n  }\r\n  return spots\r\n}"]},"metadata":{},"sourceType":"module"}