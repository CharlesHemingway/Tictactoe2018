{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Edson\\\\Desktop\\\\reacjs\\\\Tictactoe2018\\\\src\\\\components\\\\setup\\\\Board.js\";\nimport React, { Component, Fragment } from 'react';\nimport Square from './Square';\nimport Result from './Result';\nimport { calculateWinner, gameOver, getAvailableSpots } from '../../utils/helpers';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.turnTimer = function () {\n      setTimeout(function () {\n        this.setState({\n          xIsNext: !this.state.xIsNext\n        });\n      }.bind(_assertThisInitialized(_assertThisInitialized(_this))), 400);\n    };\n\n    _this.handleClick = function (i) {\n      var squares = _toConsumableArray(_this.state.squares);\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      squares[i] = _this.state.xIsNext ? 'X' : 'O';\n\n      if (_this.state.gameType === 'AI') {\n        var index = _this.minimax(squares, _this.state.aiPlayer).index;\n\n        var aiTimer = function aiTimer(i) {\n          setTimeout(function () {\n            squares[index] = i;\n          }, 200);\n        };\n\n        if (_this.state.aiPlayer === 'X') {\n          aiTimer('X');\n\n          _this.turnTimer();\n        } else {\n          aiTimer('O');\n\n          _this.turnTimer();\n        }\n      }\n\n      _this.setState({\n        squares: squares,\n        xIsNext: !_this.state.xIsNext\n      });\n    };\n\n    _this.minimax = function (newBoard, player) {\n      var winning = calculateWinner(newBoard);\n      var availableSpots = getAvailableSpots(newBoard);\n\n      if (winning === _this.state.humanPlayer) {\n        return {\n          score: -10\n        };\n      } else if (winning === _this.state.aiPlayer) {\n        return {\n          score: 10\n        };\n      } else if (availableSpots.length === 0) {\n        return {\n          score: 0\n        };\n      }\n\n      var moves = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = availableSpots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _i2 = _step.value;\n          var move = {};\n          move.index = _i2;\n          newBoard[_i2] = player;\n\n          if (player === _this.state.aiPlayer) {\n            var result = _this.minimax(newBoard, _this.state.humanPlayer);\n\n            move.score = result.score;\n          } else {\n            var _result = _this.minimax(newBoard, _this.state.aiPlayer);\n\n            move.score = _result.score;\n          }\n\n          newBoard[_i2] = null;\n          moves.push(move);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var bestMove;\n\n      if (player === _this.state.aiPlayer) {\n        var bestScore = -10000;\n\n        for (var i = 0; i < moves.length; i++) {\n          if (moves[i].score > bestScore) {\n            bestScore = moves[i].score;\n            bestMove = i;\n          }\n        }\n      } else {\n        var _bestScore = 10000;\n\n        for (var _i = 0; _i < moves.length; _i++) {\n          if (moves[_i].score < _bestScore) {\n            _bestScore = moves[_i].score;\n            bestMove = _i;\n          }\n        }\n      }\n\n      return moves[bestMove];\n    };\n\n    _this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      firstPlayer: _this.props.value,\n      humanPlayer: _this.props.value,\n      aiPlayer: 'O',\n      gameType: _this.props.type\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"renderSquare\",\n    value: function renderSquare(i) {\n      var _this2 = this;\n\n      return React.createElement(Square, {\n        value: this.state.squares[i],\n        onClick: function onClick() {\n          return _this2.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.state.firstPlayer === 'O') {\n        this.setState({\n          xIsNext: false,\n          aiPlayer: 'X'\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var winner = calculateWinner(this.state.squares);\n      var status;\n      var results;\n      var tie = gameOver(this.state.squares);\n\n      if (winner) {\n        results = 'Winner: ' + winner + '!';\n        status = React.createElement(Result, {\n          value: results,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        });\n      } else if (tie) {\n        results = 'It was a draw';\n        status = React.createElement(Result, {\n          value: results,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n      } else {\n        status = React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'));\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, status), React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport { Board as default };","map":{"version":3,"sources":["C:\\Users\\Edson\\Desktop\\reacjs\\Tictactoe2018\\src\\components\\setup\\Board.js"],"names":["React","Component","Fragment","Square","Result","calculateWinner","gameOver","getAvailableSpots","Board","props","turnTimer","setTimeout","setState","xIsNext","state","bind","handleClick","i","squares","gameType","index","minimax","aiPlayer","aiTimer","newBoard","player","winning","availableSpots","humanPlayer","score","length","moves","move","result","push","bestMove","bestScore","Array","fill","firstPlayer","value","type","winner","status","results","tie","renderSquare"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport Square from './Square'\r\nimport Result from './Result'\r\nimport { calculateWinner, gameOver, getAvailableSpots } from '../../utils/helpers'\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n      firstPlayer: this.props.value,\r\n      humanPlayer: this.props.value,\r\n      aiPlayer: 'O',\r\n      gameType: this.props.type\r\n    }\r\n  }\r\n\r\n  turnTimer = () => {\r\n    setTimeout(\r\n      function() {\r\n        this.setState({\r\n          xIsNext: !this.state.xIsNext\r\n        })\r\n      }.bind(this),\r\n      400\r\n    )\r\n  }\r\n\r\n  handleClick = i => {\r\n    let squares = [...this.state.squares]\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\r\n    if (this.state.gameType === 'AI') {\r\n      let index = this.minimax(squares, this.state.aiPlayer).index\r\n      const aiTimer = i => {\r\n        setTimeout(function() {\r\n          squares[index] = i\r\n        }, 200)\r\n      }\r\n      if (this.state.aiPlayer === 'X') {\r\n        aiTimer('X')\r\n        this.turnTimer()\r\n      } else {\r\n        aiTimer('O')\r\n        this.turnTimer()\r\n      }\r\n    }\r\n    this.setState({\r\n      squares,\r\n      xIsNext: !this.state.xIsNext\r\n    })\r\n  }\r\n\r\n  minimax = (newBoard, player) => {\r\n    let winning = calculateWinner(newBoard)\r\n    let availableSpots = getAvailableSpots(newBoard)\r\n\r\n    if (winning === this.state.humanPlayer) {\r\n      return { score: -10 }\r\n    } else if (winning === this.state.aiPlayer) {\r\n      return { score: 10 }\r\n    } else if (availableSpots.length === 0) {\r\n      return { score: 0 }\r\n    }\r\n\r\n    let moves = []\r\n    for (let i of availableSpots) {\r\n      let move = {}\r\n      move.index = i\r\n      newBoard[i] = player\r\n      if (player === this.state.aiPlayer) {\r\n        let result = this.minimax(newBoard, this.state.humanPlayer)\r\n        move.score = result.score\r\n      } else {\r\n        let result = this.minimax(newBoard, this.state.aiPlayer)\r\n        move.score = result.score\r\n      }\r\n      newBoard[i] = null\r\n      moves.push(move)\r\n    }\r\n\r\n    let bestMove\r\n    if (player === this.state.aiPlayer) {\r\n      let bestScore = -10000\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    } else {\r\n      let bestScore = 10000\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    }\r\n    return moves[bestMove]\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return <Square value={this.state.squares[i]} onClick={() => this.handleClick(i)} />\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.firstPlayer === 'O') {\r\n      this.setState({\r\n        xIsNext: false,\r\n        aiPlayer: 'X'\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let winner = calculateWinner(this.state.squares)\r\n    let status\r\n    let results\r\n    let tie = gameOver(this.state.squares)\r\n\r\n    if (winner) {\r\n      results = 'Winner: ' + winner + '!'\r\n      status = <Result value={results} />\r\n    } else if (tie) {\r\n      results = 'It was a draw'\r\n      status = <Result value={results} />\r\n    } else {\r\n      status = <h1>{'Next player: ' + (this.state.xIsNext ? 'X' : 'O')}</h1>\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"board\">\r\n          <div className=\"row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}